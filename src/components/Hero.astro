---
import { getImage } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";
import forestImage from "../assets/free-forest.jpg";

const PAGE_TITLE_ID = "_top";
const { data } = Astro.locals.starlightRoute.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const forestBackground = await getImage({ src: forestImage });

let rawHtml: string | undefined;
---

<div
	class="hero width-full pl-6 pr-6"
	style={`background-image:url(${forestBackground.src});`}
	aria-label="Stock image of aerial view of a forest."
>
	{rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title}/>
			{tagline && <div class="tagline" set:html={tagline}/>}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(
						({
							attrs: { class: className, ...attrs } = {},
							icon,
							link: href,
							text,
							variant,
						}) => (
							<LinkButton
								{href}
								{variant}
								icon={icon?.name}
								class:list={[className]}
								{...attrs}
							>
								{text}
								{icon?.html && (
									<Fragment set:html={icon.html} />
								)}
							</LinkButton>
						),
					)}
				</div>
			)
		}
	</div>
</div>

<style>
	@layer starlight.core {
		.hero {
			display: grid;
			align-items: center;
			gap: 1rem;
			padding-bottom: 1rem;
			position: relative;
			overflow: hidden;
			width: 100%;
		}

		.hero-bg {
			position: absolute;
			inset: 0;
			width: 100%;
			height: 100%;
			background-size: cover;
			background-position: center;
			background-repeat: no-repeat;
			z-index: 0;
			pointer-events: none;
		}

		.hero > *:not(.hero-bg) {
			position: relative;
			z-index: 1;
		}

		.hero > img,
		.hero > .hero-html {
			object-fit: contain;
			width: min(70%, 20rem);
			height: auto;
			margin-inline: auto;
		}

		.stack {
			flex-direction: column;
			gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
			text-align: center;
		}

		.copy {
			flex-direction: column;
			gap: 1rem;
			align-items: center;
		}

		.copy > * {
			max-width: 50ch;
		}

		h1 {
			font-size: clamp(
				var(--sl-text-3xl),
				calc(0.25rem + 5vw),
				var(--sl-text-6xl)
			);
			line-height: var(--sl-line-height-headings);
			font-weight: 600;
			color: white;
		}

		.tagline {
			font-size: clamp(
				var(--sl-text-base),
				calc(0.0625rem + 2vw),
				var(--sl-text-xl)
			);
			color: white;
			font-weight: bold;
		}

		.actions {
			gap: 1rem 2rem;
			flex-wrap: wrap;
			justify-content: center;
		}

		@media (min-width: 50rem) {
			.hero {
				grid-template-columns: 7fr 4fr;
				gap: 3%;
				padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
			}

			.hero > img,
			.hero > .hero-html {
				order: 2;
				width: min(100%, 25rem);
			}

			.stack {
				text-align: start;
			}

			.copy {
				align-items: flex-start;
			}

			.actions {
				justify-content: flex-start;
			}
		}
	}
</style>
